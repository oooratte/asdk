<!--

    This is free and unencumbered software released into the public domain.

    Anyone is free to copy, modify, publish, use, compile, sell, or
    distribute this software, either in source code form or as a compiled
    binary, for any purpose, commercial or non-commercial, and by any
    means.

    In jurisdictions that recognize copyright laws, the author or authors
    of this software dedicate any and all copyright interest in the
    software to the public domain. We make this dedication for the benefit
    of the public at large and to the detriment of our heirs and
    successors. We intend this dedication to be an overt act of
    relinquishment in perpetuity of all present and future rights to this
    software under copyright law.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

    For more information, please refer to <http://unlicense.org/>

-->
<!-- ===============================================================
     parent pom for all java-nature related projects.
  -->
<project
    xmlns             ="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi         ="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                        http://maven.apache.org/maven-v4_0_0.xsd"
>
	<modelVersion>4.0.0</modelVersion>

    <!-- ===========================================================
         define parent
      -->
	<parent>
	    <groupId>net.as-development.asdk</groupId>
	    <artifactId>pom-parent-nature-all</artifactId>
	    <version>3.0.0-SNAPSHOT</version>
	    <relativePath>../pom-parent-nature-all</relativePath>
	</parent>

    <!-- ===========================================================
         define THIS
         Note : groupID and version comes from parent !
      -->
	<artifactId>pom-parent-nature-java</artifactId>
    <packaging>pom</packaging>

    <!-- ===========================================================
      -->
    <properties>
	    <surefire.fork-count>1</surefire.fork-count>
    	<surefire.thread-count>1</surefire.thread-count>
    </properties>

    <!-- ===========================================================
         define which dependencies in which version has to be used
      -->
    <dependencyManagement>
	    <dependencies>
	    
			<dependency>
			    <groupId>${project.groupId}</groupId>
			    <artifactId>bom-nature-java</artifactId>
			    <version>${project.version}</version>
			    <type>pom</type>
			    <scope>import</scope>
			</dependency>

	    </dependencies>
    </dependencyManagement>

    <!-- ===========================================================
      -->
    <dependencies>

        <!-- dependencies : runtime -->
        
        <!-- DO NOT START THE HELL OF 2^n COMBINATIONS OF DEPENDENCIES HERE.
             Add runtime dependencies where they are used.
             BUT define it's version HERE before ... inside <dependencyManagement> section .-)
          -->
        
        <!-- dependencies : logging -->
        
        <!-- logging is a feature ALL derived projects need.
             So this is a section we have to add here and not in derived projects .-)
          -->
        
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <scope>compile</scope>
        </dependency>
        
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-ext</artifactId>
            <scope>compile</scope>
        </dependency>
        
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- dependencies : unit tests -->

        <!-- unit testing is a feature ALL derived projects need.
             So this is a section we have to add here and not in derived projects .-)
             But we add 'common dependencies' here only.
             Special dependencies has to be added in the project direct.
          -->

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-core</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-api-mockito</artifactId>
            <scope>test</scope>
        </dependency>
        
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4-rule-agent</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>
    
    <!-- ===========================================================
      -->
    <build>
    
        <!-- override default naming of the JAR artifact ...
             by adding groupId to those name which is not part of it by default.
             
             Thats to prevent name clashes if those libraries are mixed within
             the same directory at installation time .-)
          -->
    
        <finalName>${project.groupId}-${project.artifactId}-${project.version}</finalName>
    
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>aspectj-maven-plugin</artifactId>
                    <version>${version.maven.plugin.aspectj}</version>
                </plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>cobertura-maven-plugin</artifactId>
					<version>${version.maven.plugin.cobertura}</version>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>findbugs-maven-plugin</artifactId>
					<version>${version.maven.plugin.findbugs}</version>
				</plugin>

				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-dependency-plugin
										</artifactId>
										<versionRange>
											[2.8,)
										</versionRange>
										<goals>
											<goal>unpack</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
            </plugins>
        </pluginManagement>
        
	    <plugins>
	        <plugin>
	            <artifactId>maven-dependency-plugin</artifactId>
	        </plugin>
	        
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <configuration>
                    <encoding>${generic.encoding}</encoding>
                </configuration>
            </plugin>
            
	        <plugin>
	            <artifactId>maven-clean-plugin</artifactId>
	        </plugin>
	        
	        <plugin>
	            <artifactId>maven-compiler-plugin</artifactId>
	            <configuration>

                    <!-- By default Maven seems to preferr a JRE instead of the JDK on fork ...
                         Ensure the JDK is used always.
                      -->

                    <executable>${JAVA_HOME}/bin/javac</executable>
               
	                <fork>true</fork>
                    <compilerVersion>${version.java}</compilerVersion>
	                <source>${version.java}</source>
                    <target>${version.java}</target>
	                <encoding>${generic.encoding}</encoding>
	                <meminitial>${generic.mem.min}</meminitial>
	                <maxmem>${generic.mem.max}</maxmem>
	                <showDeprecation>true</showDeprecation>
                    <showWarnings>true</showWarnings>
	            </configuration>
	        </plugin>
	        
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
			    <configuration>
			        <complianceLevel>${version.java}</complianceLevel>
			        <encoding>${generic.encoding}</encoding>
			     </configuration>
<!--
			     <executions>
			        <execution>
			           <goals>
			              <goal>compile</goal>
			              <goal>test-compile</goal>
			           </goals>
			        </execution>
			     </executions>
-->
            </plugin>
            
			<plugin>
			    <artifactId>maven-eclipse-plugin</artifactId>
			    <configuration>
			       <ajdtVersion>${version.java}</ajdtVersion>
			    </configuration>
			</plugin>
			
	        <plugin>
	            <artifactId>maven-surefire-plugin</artifactId>
					<executions>
						<execution>
							<id>default-test</id>
							<phase>test</phase>
							<goals>
								<goal>test</goal>
							</goals>
						</execution>
					</executions>

    	            <configuration>

                    <!-- By default Maven seems to preferr a JRE instead of the JDK on fork ...
                         Ensure the JDK is used always.
                      -->

                    <jvm>${JAVA_HOME}/bin/java</jvm>

	                <!-- please read documentation on
	                     'http://maven.apache.org/surefire/maven-surefire-plugin/examples/fork-options-and-parallel-execution.html'
	                     to understand those settings and which combinations can work and which not :-)
                      -->

					<forkCount>${surefire.fork-count}</forkCount>
					<reuseForks>false</reuseForks>
					
					<!-- Hard Tobacco .-)

					     a) -javaagent:...
					        JUnit 4 PowerMockRules require to define its agent explicit

					     b) -XX:-UseSplitVerifier
					        ByteCode verification was changed slightly between JDK6 and JDK7.
					        http://stackoverflow.com/questions/15122890/java-lang-verifyerror-expecting-a-stackmap-frame-at-branch-target-jdk-1-7
					  -->
					
                    <argLine>-Xms${generic.mem.min} -Xmx${generic.mem.max} -XX:MaxPermSize=256m -XX:-UseSplitVerifier -javaagent:${settings.localRepository}/org/powermock/powermock-module-javaagent/${version.test.powermock}/powermock-module-javaagent-${version.test.powermock}.jar</argLine>
                    <useUnlimitedThreads>false</useUnlimitedThreads>
                    <threadCount>${surefire.thread-count}</threadCount>
	                <parallel>methods</parallel>
	            </configuration>
	        </plugin>
	        
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <configuration>
                    <formats>
                        <format>xml</format>
                    </formats>
                </configuration>
            </plugin>

            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                        
                            <!-- force creating additional special JARs containing the test-code.
                                 Thats useful to export test helper classes and reuse them on other projects.
                                 Use: <type>test-jar</type> if your define a dependency then .-)
                                 
                                 @see http://maven.apache.org/plugins/maven-jar-plugin/test-jar-mojo.html
                              -->
                            <goal>test-jar</goal>
                        
                        </goals>
                    </execution>
                </executions>
            </plugin> 

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
<!-- 
                <configuration>
                    <additionalparam>-Xdoclint:none</additionalparam>
                </configuration>
 -->
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

	        <plugin>
	            <artifactId>maven-install-plugin</artifactId>
	        </plugin>

   	    </plugins>
    </build>
    
    <profiles>
        <profile>
            <id>profile-shade-jar</id>
            <activation>
                <file>
                    <exists>profile-shade-jar.trigger</exists>
                </file>
            </activation>
            
            <build>
                <plugins>
            
                    <!-- build the shade JAR -->

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-shade-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>shade</goal>
                                </goals>
                                <configuration>
                                    <finalName>${project.build.finalName}-shade</finalName>
                                    <transformers>
                                        <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                            <manifestEntries>
                                                <Main-Class>${profile.shade.var.main.class}</Main-Class>
                                                <Build-Number>${project.version}</Build-Number>
                                            </manifestEntries>
                                        </transformer>
                                    </transformers>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    
                    <!-- attach the shade JAR so Maven will deliver it automatically -->
                  
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>attach-artifacts</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>attach-artifact</goal>
                                </goals>
                                <configuration>
                                    <artifacts>
                                        <artifact>
                                            <file>target/${project.build.finalName}-shade.jar</file>
                                            <type>jar</type>
                                            <classifier>shade</classifier>
                                        </artifact>
                                    </artifacts>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    
                </plugins>
            </build>
        </profile>
        
    </profiles>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<configuration>
                    <formats>
                        <format>html</format>
                        <format>xml</format>
                    </formats>
                </configuration>
			</plugin>
			
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<configuration>
    				<onlyAnalyze>net.as_development.*</onlyAnalyze>
				</configuration>				
			</plugin>
		</plugins>
	</reporting>

</project>
